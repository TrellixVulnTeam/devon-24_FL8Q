node {
    stage('Checking out MyThaiStar') {
        deleteDir()
        git branch: 'develop', credentialsId: 'github-devonfw-ci', url: 'https://github.com/devonfw/my-thai-star/'
    }
    stage('Load tools') {
        tool name: 'Maven 3.3.9', type: 'maven'
        env.JAVA_HOME="${tool 'OpenJDK 1.8'}"
        env.PATH="${env.JAVA_HOME}/bin:${env.PATH}"
    }

    // JACOCO and SONAR SCRIPT are REQUIRED. See:
    //      https://github.com/cbeldacap/my-thai-star/blob/develop/java/mtsj/pom.xml#L21-L61
    //      https://github.com/cbeldacap/my-thai-star/blob/develop/java/mtsj/pom.xml#L185-L194
    //      https://github.com/cbeldacap/my-thai-star/blob/develop/java/mtsj/pom.xml#L211-L282
    // stage('SonarQube analysis') {
    //     withMaven(globalMavenSettingsConfig: '9d437f6e-46e7-4a11-a8d1-2f0055f14033', jdk: 'OpenJDK 1.8', maven: 'Maven 3.3.9') {
    //         sh "cd java/mtsj && mvn sonar:sonar -X -Dsonar.login=${SONARQUBE_USERNAME} -Dsonar.password=${SONARQUBE_PASSWORD}"
    //     }
    // }
    
    stage('Install dependencies') {
        withMaven(globalMavenSettingsConfig: '9d437f6e-46e7-4a11-a8d1-2f0055f14033', jdk: 'OpenJDK 1.8', maven: 'Maven 3.3.9') {
            sh "cd java/mtsj && mvn clean install -Dmaven.test.skip=true"
        }
    }
    
    stage('Execute tests') {
        withMaven(globalMavenSettingsConfig: '9d437f6e-46e7-4a11-a8d1-2f0055f14033', jdk: 'OpenJDK 1.8', maven: 'Maven 3.3.9') {
            sh "cd java/mtsj && mvn test"
        }
    }
    
    stage('Build and store in Nexus') {
        withMaven(globalMavenSettingsConfig: '9d437f6e-46e7-4a11-a8d1-2f0055f14033', jdk: 'OpenJDK 1.8', maven: 'Maven 3.3.9') {
            sh "cd java/mtsj && mvn clean deploy -Dmaven.test.skip=true"
        }
    }

    stage('Deployment') {
        sshagent (credentials: ['3d0fa2a4-5cf0-4cf5-a3fd-23655eb33c11']) {
            def CONTAINER_PORT = 9090
            sh """
                cd java/mtsj
                # Copy resulting ".war" file from workspace to deployment server
                scp -o StrictHostKeyChecking=no -r server/target/mythaistar.war root@${params.EXTERNAL_SERVER_IP}:/root/mythaistar/java/
                
                # Launch application in Docker container
                ssh -o StrictHostKeyChecking=no root@${params.EXTERNAL_SERVER_IP} docker rm -f mts-java
                ssh -o StrictHostKeyChecking=no root@${params.EXTERNAL_SERVER_IP} docker run -itd --name=mts-java -p ${CONTAINER_PORT}:8080 tomcat:latest
                ssh -o StrictHostKeyChecking=no root@${params.EXTERNAL_SERVER_IP} docker cp mythaistar/java/mythaistar.war mts-java:/usr/local/tomcat/webapps/
            """
        }
        sh 'echo \\"Server available at http://de-mucdevondepl01:9090/mythaistar\\"'
    }
}